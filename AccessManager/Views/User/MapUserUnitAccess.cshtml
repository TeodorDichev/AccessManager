@model AccessManager.ViewModels.User.MapUserUnitAccessViewModel

<h2>Потребител: @Model.UserName (@Model.FirstName @Model.LastName)</h2>
<p>Дирекция: @Model.Department</p>
<p>Отдел: @Model.Unit</p>

<div class="row wrapper">
    <div class="col-md-6">
        <h4>Достъпни отдели</h4>
        <form asp-action="UpdateUnitAccess" method="post">
            <input type="hidden" name="username" value="@Model.UserName" />

            <form method="get" asp-action="MapUserUnitAccess" class="mb-2" as>
                <input type="hidden" name="username" value="@Model.UserName" />
                <input type="hidden" name="filterDept2" value="@Model.SelectedFilterDepartment2" /> @* Preserve other filter *@
                <input type="hidden" name="page1" value="1" /> @* Reset page to 1 on filter change *@
                <input type="hidden" name="page2" value="@Model.CurrentPage2" /> @* Preserve other pagination *@
                <label for="filterDepartment1" class="form-label">Филтър по Дирекция:</label>
                <select name="filterDepartment1" id="filterDepartment1" class="form-select" onchange="this.form.submit()">
                <option value="">Всички</option>
                @foreach (var department in Model.FilterDepartments)
                {
                    <option value="@department.Value" selected="@(department.Text == Model.SelectedFilterDepartment1 ? "selected" : null)">
                        @department.Text
                    </option>
                }
                </select>
            </form>

            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="selectAllAccessible" /></th>
                        <th>Отдел</th>
                        <th>Дирекция</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var unit in Model.AccessibleUnits)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" name="selectedAccessibleUnitIds" value="@unit.UnitId" />
                            </td>
                            <td>@unit.UnitName</td>
                            <td>@unit.DepartmentName</td>
                        </tr>
                    }
                </tbody>
            </table>

            @await Html.PartialAsync("_Pagination", 
    (Model.CurrentPage1, Model.TotalPages1, "page1", (object)new { 
        username = Model.UserName, 
        page2 = Model.CurrentPage2, 
        filterDept1 = Model.SelectedFilterDepartment1, 
        filterDept2 = Model.SelectedFilterDepartment2 
    }))
      
                <input type="hidden" id="allSelectedAccessible" name="SelectedAccessibleUnitIds" />
                <input type="hidden" id="allSelectedInaccessible" name="SelectedInaccessibleUnitIds" />

                <button type="submit" class="btn btn-danger mt-2">Премахни избраните</button>
                <button type="button" class="btn btn-secondary mt-2" id="selectAllAccessibleBtn">Избери всички</button>
        </form>
    </div>

    <div class="col-md-6">
        <h4>Недостъпни отдели</h4>
        <form asp-action="UpdateUnitAccess" method="post">
            <input type="hidden" name="username" value="@Model.UserName" />

            <form method="get" asp-action="MapUserUnitAccess" class="mb-2">
                <input type="hidden" name="username" value="@Model.UserName" />
                <input type="hidden" name="filterDept2" value="@Model.SelectedFilterDepartment2" /> @* Preserve other filter *@
                <input type="hidden" name="page1" value="1" /> @* Reset page to 1 on filter change *@
                <input type="hidden" name="page2" value="@Model.CurrentPage2" /> @* Preserve other pagination *@
            
        <label for="filterDepartment2" class="form-label">Филтър по Дирекция:</label>
        <select name="filterDepartment2" id="filterDepartment2" class="form-select">
            <option value="">Всички</option>
            @foreach (var department in Model.FilterDepartments)
            {
                <option value="@department" selected="@(department.Value == Model.SelectedFilterDepartment2 ? "selected" : null)">
                    @department.Text
                </option>
            }
        </select>
            </form>

            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="selectAllInaccessible" /></th>
                        <th>Отдел</th>
                        <th>Дирекция</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var unit in Model.InaccessibleUnits)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" name="selectedInaccessibleUnitIds" value="@unit.UnitId" />
                            </td>
                            <td>@unit.UnitName</td>
                            <td>@unit.DepartmentName</td>
                        </tr>
                    }
                </tbody>
            </table>

            @await Html.PartialAsync("_Pagination", 
    (Model.CurrentPage2, Model.TotalPages2, "page2", (object)new { 
        username = Model.UserName, 
        page2 = Model.CurrentPage2, 
        filterDept1 = Model.SelectedFilterDepartment1, 
        filterDept2 = Model.SelectedFilterDepartment2 
    }))
            <input type="hidden" id="allSelectedAccessible" name="SelectedAccessibleUnitIds" />
            <input type="hidden" id="allSelectedInaccessible" name="SelectedInaccessibleUnitIds" />

            <button type="submit" class="btn btn-success mt-2">Добави избраните</button>
            <button type="button" class="btn btn-secondary mt-2" id="selectAllInaccessibleBtn">Избери всички</button>
        </form>
    </div>
</div>

@section Scripts {
        <script src="~/js/wrapper-is-readonly.js" asp-append-version="true"></script>

<script>
    // Select all toggles for both tables (accessible and inaccessible)
    document.getElementById('selectAllAccessibleBtn').addEventListener('click', () => {
        document.querySelectorAll('input[name="selectedAccessibleUnitIds"]').forEach(cb => cb.checked = true);
    });
    document.getElementById('selectAllAccessible').addEventListener('change', function() {
        document.querySelectorAll('input[name="selectedAccessibleUnitIds"]').forEach(cb => cb.checked = this.checked);
    });

    document.getElementById('selectAllInaccessibleBtn').addEventListener('click', () => {
        document.querySelectorAll('input[name="selectedInaccessibleUnitIds"]').forEach(cb => cb.checked = true);
    });
    document.getElementById('selectAllInaccessible').addEventListener('change', function() {
        document.querySelectorAll('input[name="selectedInaccessibleUnitIds"]').forEach(cb => cb.checked = this.checked);
    });

document.querySelectorAll('form').forEach(form => {
    form.addEventListener('submit', function(e) {
        // Collect and concat checked accessible units inside this form
        const accessibleChecked = Array.from(form.querySelectorAll('input[name="selectedAccessibleUnitIds"]:checked'));
        const accessibleConcatenated = accessibleChecked.map(cb => cb.value).join(',');
        const hiddenAccessible = form.querySelector('#allSelectedAccessible');
        if (hiddenAccessible) hiddenAccessible.value = accessibleConcatenated;

        // Collect and concat checked inaccessible units inside this form
        const inaccessibleChecked = Array.from(form.querySelectorAll('input[name="selectedInaccessibleUnitIds"]:checked'));
        const inaccessibleConcatenated = inaccessibleChecked.map(cb => cb.value).join(',');
        const hiddenInaccessible = form.querySelector('#allSelectedInaccessible');
        if (hiddenInaccessible) hiddenInaccessible.value = inaccessibleConcatenated;

        // Remove all original checkboxes in this form to avoid duplicate data
        form.querySelectorAll('input[name="selectedAccessibleUnitIds"]').forEach(cb => cb.remove());
        form.querySelectorAll('input[name="selectedInaccessibleUnitIds"]').forEach(cb => cb.remove());
    });
});
</script>
}
